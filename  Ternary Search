# Python3 program to illustrate
# recursive approach to ternary search
import math as mt

# Function to perform Ternary Search
def ternarySearch(l, r, key, ar):

	if (r >= l):

		# Find the mid1 and mid2
		mid1 = l + (r - l) //3
		mid2 = r - (r - l) //3

		# Check if key is present at any mid
		if (ar[mid1] == key):
			return mid1
		
		if (ar[mid2] == key):
			return mid2
		
		# Since key is not present at mid,
		# check in which region it is present
		# then repeat the Search operation
		# in that region
		if (key < ar[mid1]):

			# The key lies in between l and mid1
			return ternarySearch(l, mid1 - 1, key, ar)
		
		elif (key > ar[mid2]):

			# The key lies in between mid2 and r
			return ternarySearch(mid2 + 1, r, key, ar)
		
		else:

			# The key lies in between mid1 and mid2
			return ternarySearch(mid1 + 1,
								mid2 - 1, key, ar)
		
	# Key not found
	return -1

# Driver code
l, r, p = 0, 9, 5

# Get the array
# Sort the array if not sorted
ar = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]

# Starting index
l = 0

# length of array
r = 9

# Checking for 5

# Key to be searched in the array
key = 5

# Search the key using ternarySearch
p = ternarySearch(l, r, key, ar)

# Print the result
print("Index of", key, "is", p)

# Checking for 50

# Key to be searched in the array
key = 50

# Search the key using ternarySearch
p = ternarySearch(l, r, key, ar)

# Print the result
print("Index of", key, "is", p)

# This code is contributed by
# Mohit kumar 29




# Python 3 program to illustrate iterative
# approach to ternary search

# Function to perform Ternary Search
def ternarySearch(l, r, key, ar):
	while r >= l:
		
		# Find mid1 and mid2
		mid1 = l + (r-l) // 3
		mid2 = r - (r-l) // 3

		# Check if key is at any mid
		if key == ar[mid1]:
			return mid1
		if key == mid2:
			return mid2

		# Since key is not present at mid,
		# Check in which region it is present
		# Then repeat the search operation in that region
		if key < ar[mid1]:
			# key lies between l and mid1
			r = mid1 - 1
		elif key > ar[mid2]:
			# key lies between mid2 and r
			l = mid2 + 1
		else:
			# key lies between mid1 and mid2
			l = mid1 + 1
			r = mid2 - 1

	# key not found
	return -1

# Driver code

# Get the list
# Sort the list if not sorted
ar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Starting index
l = 0

# Length of list
r = 9

# Checking for 5
# Key to be searched in the list
key = 5

# Search the key using ternary search
p = ternarySearch(l, r, key, ar)

# Print the result
print("Index of", key, "is", p)

# Checking for 50
# Key to be searched in the list
key = 50

# Search the key using ternary search
p = ternarySearch(l, r, key, ar)

# Print the result
print("Index of", key, "is", p)




def ternary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid1 = low + (high - low) // 3
        mid2 = high - (high - low) // 3

        if arr[mid1] == target:
            return mid1
        elif arr[mid2] == target:
            return mid2
        elif target < arr[mid1]:
            high = mid1 - 1
        elif target > arr[mid2]:
            low = mid2 + 1
        else:
            low = mid1 + 1
            high = mid2 - 1

    return -1  # Target not found

# Test the ternary search algorithm
arr = [1, 3, 5, 7, 9]
target = 5
index = ternary_search(arr, target)
print(index)  # Output: 2


### update
#