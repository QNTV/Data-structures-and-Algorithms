def findKthLargest(nums: List[int], k: int) -> int:
    def quickSelect(nums: List[int], l: int, r: int, k: int) -> int:
        p = partition(nums, l, r, k)
        if p < k:
            return quickSelect(nums, p + 1, r, k)
        if p > k:
            return quickSelect(nums, l, p - 1, k)

        return nums[p]

    def partition(nums: List[int], l: int, r: int, k: int) -> int:
        pivot, p = nums[r], r

        i = l
        while i < p:
            if nums[i] > pivot:
                nums[i], nums[p - 1] = nums[p - 1], nums[i]
                nums[p], nums[p - 1] = nums[p - 1], nums[p]
                i -= 1
                p -= 1
            i += 1

        return p
    
    return quickSelect(nums, 0, len(nums) - 1, len(nums) - k)

nums = [2, 8, 5, 1, 4, 6, 7, 3, 0, 9]
for k in range(1,10):
    kthLargest = findKthLargest(nums, k)
    suffix = "st" if (k == 1) else "nd" if (k == 2) else "rd" if (k == 3) else "th"
    print(str(k) + suffix + " largest = " + str(nums[kthLargest]))  

###


 update


###